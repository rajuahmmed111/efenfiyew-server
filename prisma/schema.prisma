// datasource and generator setup
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------------------------------------------------------
//  ENUMS
// ---------------------------------------------------------

enum UserRole {
  USER
  FARMER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum PaymentStatus {
  SUCCESS
  PENDING
  FAILED
}

enum Plan {
  // Default plan or free
  DEFAULT
  // Monthly plan : 7.99
  MONTHLY
  // yearly plan : 79.99
  ANNUAL
}

enum PaymentProvider {
  STRIPE
}

// ---------------------------------------------------------
//  MODEL
// ---------------------------------------------------------

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  fullName      String
  email         String     @unique
  password      String
  profileImage  String     @default("https://i.ibb.co/Ps9gZ8DD/Profile-image.png")
  contactNumber String?
  address       String?
  country       String?
  role          UserRole   @default(USER)
  status        UserStatus @default(ACTIVE)
  isSubscribe   Boolean    @default(false)

  plan Plan @default(DEFAULT)

  // add for stripe integration
  stripeCustomerId String?

  otp        String?
  otpExpiry  DateTime?
  identifier String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  payment Payment[]
  product Product[]
  review  Review[]

  @@map("users")
}

model Admin {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Product {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  image       String
  inStock     Boolean @default(true)
  quantity    Int     @default(0)
  sku         String  @default("12345")
  discount    Float   @default(0)
  brandName   String  @default("Apple")
  brandDesc   String  @default("Locally grown staple vegetables with quality assurance")
  category    String
  tags        String

  // relationships
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review    Review[]
  // payment   Payment[]

  @@map("products")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int?
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model Payment {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  productIds String[]

  amount      Float
  currency    String
  status      String
  provider    String @default("STRIPE")
  description String

  paymentIntentId String
  sessionId       String
  email           String?
  customerName    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

model Invoice {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId          String
  customerName     String
  customerEmail    String
  product          String
  quantity         Int
  status           String
  closeDate        DateTime
  shippingAddress  String
  preferredCourier String
  deliveryNotes    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoices")
}
